
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

model User{
  id String @id @default(uuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  role String @default("student")

  mobile_number String?
  hostel_id String?
  hostel Hostel? @relation(fields: [hostel_id],references: [id], onDelete: Cascade)

  org_id String?
  organization Organization? @relation(fields: [org_id],references: [id],onDelete: Cascade)

  room_no String?
  floor String?
  staff Staff?


  laundries Laundry[]
  issues Issues[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // accounts Account[] if Google or github login is required
}
model Laundry{
  id String @id @default(uuid())
  total_quantity Int
  confirmed_time DateTime?
  plant_confirmed_time DateTime?
  student_confirmed_time DateTime?
  
  room_no String?

  cloth_id String 
  clothes Clothes @relation(fields: [cloth_id],references: [id])
  
  userId String
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)

  hostelId String?
  hostel Hostel? @relation(fields: [hostelId],references: [id],onDelete: Cascade)

  issues Issues[]
  missingItem MissingItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cloth_id])
 
}

model Clothes {
  id            String          @id @default(uuid())
  clothingItems     ClothesClothingItem[]  // Updated to reference the intermediate model
  laundry       Laundry?   

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ClothingItem {
  id              String     @id @default(uuid())
  name            String
  type            String?
  min_weight_in_grams Int
  max_weight_in_grams Int?

  clothes             ClothesClothingItem[]

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model ClothesClothingItem {
  clothes         Clothes     @relation(fields: [clothesId], references: [id],onDelete: Cascade)
  clothesId       String
  clothingItem    ClothingItem @relation(fields: [clothingItemId], references: [id],onDelete: Cascade)
  clothingItemId  String
  
  quantity        Int          // Additional field to store quantity

  @@id([clothesId, clothingItemId]) // Composite primary key
}


model Staff{
  id String @id @default(uuid())
  userId String
  hostel_id String?
  orgId String
  name String
  group String?

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  hostel Hostel? @relation(fields: [hostel_id], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [orgId],references: [id],onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])

}
model Organization{
 id String @id @default(uuid())
 name String
 type String

 hostels Hostel[]
 staffs Staff[]
 users User[]

 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}

model Hostel{
  id String @id @default(uuid())
  name String
  total_floors Int
  total_rooms Int
  gender_type String
  warden String?

  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  staff Staff[]


  users User[]
  laundries Laundry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model Issues{
  id String @id @default(uuid())
  description String

  resolved Boolean @default(false)

  userId String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

  laundryId String @unique
  laundry Laundry @relation(fields: [laundryId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model MissingItem{
  id String @id @default(uuid())
  laundryId String 
  laundry Laundry @relation(fields: [laundryId],references: [id],onDelete: Cascade)

  clothingItemId String 
  quantity Int

  status Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
// If GOOGLE OR GITHUB LOGIN IS REQUIRED
// model Account{
//   id String @id @default(uuid())
//   userId String
//   type String
//   provider String
//   providerAccountId String
//   refresh_token String? 
//   access_token String? 
//   expires_at Int?
//   token_type String?
//   scope String?
//   id_token String? 
//   session_state String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider,providerAccountId])
// }